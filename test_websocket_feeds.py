#!/usr/bin/env python3
"""
Simple WebSocket Price Feeds Test
"""
import asyncio
import sys
import os
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from modules.websocket_feeds import WebSocketFeeds, PriceBuffer
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Make sure to create modules/websocket_feeds.py first")
    sys.exit(1)

async def test_websocket_feeds():
    """Test WebSocket Price Feeds functionality"""
    
    print("üß™ Testing WebSocket Price Feeds")
    print("=" * 50)
    
    # Test configuration
    config = {
        'WEBSOCKET_CONFIG': {
            'RECONNECT_DELAY': 1.0,
            'MAX_RECONNECT_DELAY': 60.0,
            'BUFFER_SIZE': 100
        }
    }
    
    try:
        # Test 1: Initialization
        print("üìä Test 1: WebSocket Feeds Initialization")
        feeds = WebSocketFeeds(config)
        
        print("‚úÖ WebSocket Feeds initialized correctly")
        print(f"   Price buffers: {len(feeds.price_buffers)}")
        print(f"   Subscribed symbols: {len(feeds.subscribed_symbols)}")
        print(f"   Connected: Binance={feeds.binance_connected}, Drift={feeds.drift_connected}")
        
        # Test 2: Price Buffer Functionality
        print("\nüìä Test 2: Price Buffer Operations")
        
        buffer = PriceBuffer(max_size=10)
        test_prices = [100.0, 101.0, 102.0, 103.0, 104.0, 105.0]
        
        for price in test_prices:
            buffer.add_price(price)
        
        latest = buffer.get_latest()
        ma_3 = buffer.get_moving_average(3)
        volatility = buffer.get_volatility(6)
        is_stale = buffer.is_stale()
        
        print("‚úÖ Price buffer operations working")
        print(f"   Latest price: ${latest}")
        print(f"   Moving average (3): ${ma_3:.2f}")
        print(f"   Volatility (6): {volatility:.4f}")
        print(f"   Is stale: {is_stale}")
        
        # Test 3: Symbol Subscription
        print("\nüìä Test 3: Symbol Subscription")
        
        feeds.subscribe_symbol('SOLUSDT')
        feeds.subscribe_symbol('ETHUSDT')
        
        print("‚úÖ Symbol subscription working")
        print(f"   Subscribed symbols: {feeds.subscribed_symbols}")
        print(f"   Price buffers created: {len(feeds.price_buffers)}")
        
        # Test 4: Callback System
        print("\nüìä Test 4: Callback System")
        
        callback_results = []
        
        async def test_callback(exchange, symbol, price, raw_data):
            callback_results.append({
                'exchange': exchange,
                'symbol': symbol,
                'price': price
            })
        
        feeds.add_callback(test_callback)
        
        # Simulate message processing
        test_message = {
            's': 'SOLUSDT',
            'c': '150.25',
            'E': 1640995200000
        }
        
        await feeds._process_binance_message(test_message)
        
        print("‚úÖ Callback system working")
        print(f"   Callbacks registered: {len(feeds.callbacks)}")
        print(f"   Messages processed: {feeds.metrics['messages_received']}")
        if callback_results:
            print(f"   Latest callback: {callback_results[-1]}")
        
        # Test 5: Price Statistics
        print("\nüìä Test 5: Price Statistics")
        
        # Add more prices to SOL buffer for statistics
        sol_buffer = feeds.price_buffers.get('SOLUSDT')
        if sol_buffer:
            for i in range(10):
                sol_buffer.add_price(150.0 + i * 0.1)
        
        stats = feeds.get_price_statistics('SOLUSDT')
        
        print("‚úÖ Price statistics working")
        if stats:
            print(f"   Latest price: ${stats.get('latest_price', 0)}")
            print(f"   MA(10): ${stats.get('moving_average_10', 0):.2f}")
            print(f"   Volatility: {stats.get('volatility', 0):.4f}")
            print(f"   Buffer size: {stats.get('buffer_size', 0)}")
        
        # Test 6: Connection Metrics
        print("\nüìä Test 6: Connection Metrics")
        
        metrics = feeds.get_connection_metrics()
        
        print("‚úÖ Connection metrics working")
        print(f"   Uptime: {metrics['uptime_seconds']:.1f}s")
        print(f"   Messages received: {metrics['messages_received']}")
        print(f"   Subscribed symbols: {metrics['subscribed_symbols']}")
        print(f"   Fallback active: {metrics['fallback_active']}")
        
        # Test 7: Simulated WebSocket Connection (Short Test)
        print("\nüìä Test 7: WebSocket Connection Test")
        
        try:
            # Start the feeds (this will try to connect or start fallback)
            print("Starting WebSocket feeds...")
            tasks = await feeds.start()
            
            print("‚úÖ WebSocket feeds started")
            print(f"   Tasks created: {len(tasks) if tasks else 0}")
            print(f"   Binance connected: {feeds.binance_connected}")
            print(f"   Fallback active: {feeds.fallback_active}")
            
            # Let it run for a short time
            print("Running for 3 seconds...")
            await asyncio.sleep(3.0)
            
            # Check metrics again
            final_metrics = feeds.get_connection_metrics()
            print(f"   Final message count: {final_metrics['messages_received']}")
            print(f"   Message rate: {final_metrics['message_rate']:.2f}/s")
            
            # Clean shutdown
            await feeds.close()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  WebSocket test error (expected): {e}")
            print("   This is normal if websockets package is not installed")
        
        print("\nüéâ All WebSocket Price Feeds tests completed!")
        print("=" * 50)
        print("üìä WebSocket Feeds Features Verified:")
        print("   ‚úÖ Price buffer with statistics")
        print("   ‚úÖ Symbol subscription management")
        print("   ‚úÖ Callback notification system")
        print("   ‚úÖ Message processing pipeline")
        print("   ‚úÖ Connection metrics tracking")
        print("   ‚úÖ Automatic fallback mechanism")
        print("   ‚úÖ Real-time price statistics")
        print("   ‚úÖ Graceful error handling")
        
        return True
        
    except Exception as e:
        print(f"‚ùå TEST FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Run all tests"""
    print("üöÄ WebSocket Price Feeds Testing")
    print("=" * 50)
    
    # Check for websockets package
    try:
        import websockets
        print("‚úÖ websockets package available")
    except ImportError:
        print("‚ö†Ô∏è  websockets package not found")
        print("   Install with: pip install websockets")
        print("   Fallback mode will be used for testing")
    
    try:
        success = await test_websocket_feeds()
        if success:
            print("\nüéâ WebSocket Price Feeds module is ready!")
            print("\nüìã Next Steps:")
            print("   1. Install websockets: pip install websockets")
            print("   2. Integrate with main bot")
            print("   3. Test with live market data")
            print("   4. Configure trading pairs")
            print("   5. Monitor performance metrics")
            return 0
        else:
            print("\n‚ùå Tests failed - please fix issues before proceeding")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è  Test interrupted by user")
        return 0

if __name__ == "__main__":
    import sys
    exit_code = asyncio.run(main())
    sys.exit(exit_code)